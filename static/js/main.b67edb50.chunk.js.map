{"version":3,"sources":["constants/CardInfo.js","actions/card.js","reducers/card.js","components/Card/Card.js","components/Buttons/StyledButton.js","components/Buttons/Buttons.js","components/Card/CardList.js","components/Card/StarterCard.js","App.js","reportWebVitals.js","index.js"],"names":["MENU","GAME","STAND","POST","Suits","Ranks","RanksValues","A","J","Q","K","HIT","startedCards","playerCards","Card","props","rank","deck","side","className","style","width","height","StyledButton","func","label","borderRadius","type","onClick","Buttons","Hit","Stand","StartGame","gameState","setGameState","Reset","Result","CardList","cards","cardComponent","map","user","i","suit","StarterCard","secondCard","rank1","suit1","rank2","suit2","hitCards","dealer","App","useState","setPlayerCards","dealerCards","setDealerCards","title","setTitle","starterCard","Math","floor","random","length","player","setPlayer","setDealer","playerScore","setPlayerScore","dealerScore","setDealerScore","dealerHitScore","setDealerHitScore","dealerHitCards","setDealerHitCards","DealerHit","newCards","updatedCards","concat","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","playerChoice","state","action","Object","assign","payload","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b67edb50.chunk.js","sourcesContent":["export const MENU = 'MENU';\r\nexport const GAME = 'GAME';\r\nexport const STAND = 'STAND';\r\nexport const POST = 'POST';\r\n\r\nexport const Suits = ['♠', '♥', '♦', '♣'];\r\n\r\nexport const Ranks = [\r\n  'A',\r\n  '2',\r\n  '3',\r\n  '4',\r\n  '5',\r\n  '6',\r\n  '7',\r\n  '8',\r\n  '9',\r\n  '10',\r\n  'J',\r\n  'Q',\r\n  'K',\r\n];\r\n\r\nexport const RanksValues = {\r\n  1: 1,\r\n  2: 2,\r\n  3: 3,\r\n  4: 4,\r\n  5: 5,\r\n  6: 6,\r\n  7: 7,\r\n  8: 8,\r\n  9: 9,\r\n  10: 10,\r\n  A: 10,\r\n  J: 10,\r\n  Q: 10,\r\n  K: 10,\r\n};\r\n\r\nexport const Layouts = {};\r\n","import { Suits, Ranks, RanksValues, Layouts } from '../constants/CardInfo';\r\nexport const HIT = 'HIT';\r\n\r\n// export const Hit = () => {\r\n//   const newCards = playerCards.concat({\r\n//     rank: Ranks[Math.floor(Math.random() * Ranks.length)],\r\n//     suit: Suits[Math.floor(Math.random() * Suits.length)],\r\n//   });\r\n//   setPlayerCards(newCards);\r\n// };\r\n\r\nexport const hit = () => ({\r\n  type: HIT,\r\n  payload: {\r\n    rank: Ranks[Math.floor(Math.random() * Ranks.length)],\r\n    suit: Suits[Math.floor(Math.random() * Suits.length)],\r\n  },\r\n});\r\n","import { HIT } from '../actions/card';\r\n\r\nconst startedCards = {\r\n  playerCards: [],\r\n};\r\n\r\nexport const playerChoice = (state = startedCards, action) => {\r\n  switch (action.type) {\r\n    case HIT:\r\n      return Object.assign({}, state, {\r\n        playerCards: state.playerCards.concat(action.payload),\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n  const { rank, deck, side } = props;\r\n  return (\r\n    <div\r\n      className=\"bg-white dib br4 ba b--black ma1 grow f1 flex-column\"\r\n      style={{ width: 200, height: 280 }}\r\n    >\r\n      {side ? (\r\n        <div\r\n          className={\r\n            deck === '♠' || deck === '♣' ? 'center black ma3' : 'center red ma3'\r\n          }\r\n        >\r\n          <h2>{rank}</h2>\r\n          <h2>{deck}</h2>\r\n        </div>\r\n      ) : (\r\n        <div className=\"cardBack br4 ba b--black center\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nconst StyledButton = ({ func, label }) => {\r\n  return (\r\n    <button\r\n      style={{ width: 150, borderRadius: 10 }}\r\n      className=\"pa3 ma4 ba bg-yellow grow\"\r\n      type=\"submit\"\r\n      onClick={func}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default StyledButton;\r\n","import React from 'react';\r\nimport StyledButton from './StyledButton';\r\nimport { GAME, MENU, STAND, POST } from '../../constants/CardInfo';\r\n\r\nconst Buttons = ({\r\n  Hit,\r\n  Stand,\r\n  StartGame,\r\n  gameState,\r\n  setGameState,\r\n  Reset,\r\n  Result,\r\n}) => {\r\n  switch (gameState) {\r\n    case GAME:\r\n      return (\r\n        <div>\r\n          <StyledButton func={Hit} label=\"Hit\" />\r\n          <StyledButton func={Stand} label=\"Stand\" />\r\n        </div>\r\n      );\r\n    case MENU:\r\n      return (\r\n        <div>\r\n          <StyledButton func={StartGame} label=\"Start\" />\r\n        </div>\r\n      );\r\n    case STAND:\r\n      return (\r\n        <div>\r\n          <StyledButton func={Result} label=\"Next\" />\r\n        </div>\r\n      );\r\n    case POST:\r\n      return (\r\n        <div>\r\n          <StyledButton\r\n            func={() => {\r\n              Reset();\r\n              setGameState(MENU);\r\n            }}\r\n            label=\"Menu\"\r\n          />\r\n        </div>\r\n      );\r\n    default:\r\n      return <div>{`Error! In ${gameState}`}</div>;\r\n  }\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n  const { cards } = props;\r\n  const cardComponent = cards.map((user, i) => {\r\n    return (\r\n      <Card key={i} rank={cards[i].rank} deck={cards[i].suit} side={true} />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport Card from './Card';\r\nimport CardList from './CardList';\r\nimport { GAME, MENU } from '../../constants/CardInfo';\r\n\r\nconst StarterCard = ({\r\n  rank1,\r\n  suit1,\r\n  rank2,\r\n  suit2,\r\n  gameState,\r\n  hitCards,\r\n  dealer,\r\n}) => {\r\n  let secondCard;\r\n  if (dealer && gameState === GAME) {\r\n    secondCard = false;\r\n  } else if (gameState === MENU) {\r\n    secondCard = false;\r\n  } else {\r\n    secondCard = true;\r\n  }\r\n\r\n  return (\r\n    <div className=\"center ma3\">\r\n      <Card\r\n        rank={rank1}\r\n        deck={suit1}\r\n        side={gameState === MENU ? false : true}\r\n      />\r\n      <Card rank={rank2} deck={suit2} side={secondCard} />\r\n      <CardList cards={hitCards} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StarterCard;\r\n","import React, { useState, useEffect, useReducer } from 'react';\nimport Card from './components/Card/Card';\nimport Buttons from './components/Buttons/Buttons';\nimport CardList from './components/Card/CardList';\nimport StarterCard from './components/Card/StarterCard';\nimport {\n  Suits,\n  Ranks,\n  RanksValues,\n  GAME,\n  MENU,\n  STAND,\n  POST,\n} from './constants/CardInfo';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { hit } from './actions/card';\nimport 'tachyons';\nimport './App.css';\n\nfunction App() {\n  const [gameState, setGameState] = useState(MENU);\n  const [playerCards, setPlayerCards] = useState([]);\n  const [dealerCards, setDealerCards] = useState([]);\n  const [title, setTitle] = useState('BlackJack');\n  const starterCard = [\n    {\n      rank1: Ranks[Math.floor(Math.random() * Ranks.length)],\n      rank2: Ranks[Math.floor(Math.random() * Ranks.length)],\n      suit1: Suits[Math.floor(Math.random() * Suits.length)],\n      suit2: Suits[Math.floor(Math.random() * Suits.length)],\n    },\n    {\n      rank1: Ranks[Math.floor(Math.random() * Ranks.length)],\n      rank2: Ranks[Math.floor(Math.random() * Ranks.length)],\n      suit1: Suits[Math.floor(Math.random() * Suits.length)],\n      suit2: Suits[Math.floor(Math.random() * Suits.length)],\n    },\n  ];\n\n  const [player, setPlayer] = useState(starterCard[0]);\n  const [dealer, setDealer] = useState(starterCard[1]);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [dealerHitScore, setDealerHitScore] = useState(0);\n  const [dealerHitCards, setDealerHitCards] = useState([]);\n\n  const Hit = () => {\n    const newCards = {\n      rank: Ranks[Math.floor(Math.random() * Ranks.length)],\n      suit: Suits[Math.floor(Math.random() * Suits.length)],\n    };\n    const updatedCards = playerCards.concat(newCards);\n\n    setPlayerScore(playerScore + RanksValues[newCards.rank]);\n    setPlayerCards(updatedCards);\n\n    if (playerScore + RanksValues[newCards.rank] > 21) {\n      setTitle('Bust!');\n      setGameState(POST);\n    }\n  };\n\n  const CountCard = (cards) => {\n    let score = 0;\n    for (let i = 0; i < cards.length; i++) {}\n    return score;\n  };\n\n  const DealerHit = () => {\n    const newCards = {\n      rank: Ranks[Math.floor(Math.random() * Ranks.length)],\n      suit: Suits[Math.floor(Math.random() * Suits.length)],\n    };\n    const updatedCards = dealerCards.concat(newCards);\n\n    setDealerHitScore(dealerHitScore + RanksValues[newCards.rank]);\n    setDealerHitCards(updatedCards);\n  };\n\n  const Result = () => {\n    setDealerCards(dealerHitCards);\n    if (dealerScore + dealerHitScore > 21) {\n      setTitle('You Win!');\n      setDealerScore(dealerScore + dealerHitScore);\n      setGameState(POST);\n      return;\n    }\n    if (playerScore < dealerScore + dealerHitScore) {\n      setTitle('You Lose!');\n      setDealerScore(dealerScore + dealerHitScore);\n      setGameState(POST);\n    } else {\n      setDealerScore(dealerScore + dealerHitScore);\n      DealerHit();\n    }\n  };\n\n  const Stand = () => {\n    setGameState(STAND);\n    if (playerScore < dealerScore) {\n      setTitle('You Lose!');\n      setGameState(POST);\n    } else {\n      DealerHit();\n    }\n  };\n\n  const Reset = () => {\n    setPlayer(starterCard[0]);\n    setDealer(starterCard[1]);\n    setPlayerScore(0);\n    setDealerScore(0);\n    setDealerHitScore(0);\n    setPlayerCards([]);\n    setDealerCards([]);\n    setDealerHitCards([]);\n    setTitle('BlackJack');\n  };\n\n  const StartGame = () => {\n    setGameState(GAME);\n    if (\n      (player.rank1 === 'A' && RanksValues[player.rank2] === 10) ||\n      (player.rank2 === 'A' && RanksValues[player.rank1] === 10)\n    ) {\n      setTitle('Blackjack! You Win!');\n      setGameState(POST);\n    }\n    setPlayerScore(RanksValues[player.rank1] + RanksValues[player.rank2]);\n    setDealerScore(RanksValues[dealer.rank1] + RanksValues[dealer.rank2]);\n  };\n\n  return (\n    <div className=\"ma4\">\n      <StarterCard\n        rank1={dealer.rank1}\n        suit1={dealer.suit1}\n        rank2={dealer.rank2}\n        suit2={dealer.suit2}\n        hitCards={dealerCards}\n        gameState={gameState}\n        dealer={true}\n      />\n      <div className=\"center\">\n        <h1 class=\"f2 lh-title\">{title}</h1>\n      </div>\n      <StarterCard\n        rank1={player.rank1}\n        suit1={player.suit1}\n        rank2={player.rank2}\n        suit2={player.suit2}\n        hitCards={playerCards}\n        gameState={gameState}\n        dealer={false}\n      />\n      <div className=\"center\">\n        <Buttons\n          Hit={Hit}\n          Stand={Stand}\n          gameState={gameState}\n          setGameState={setGameState}\n          StartGame={StartGame}\n          Reset={Reset}\n          Result={Result}\n        />\n      </div>\n      {/* <div className=\"center\">\n        <h1>Dealer: {dealerScore}</h1>\n      </div>\n      <div className=\"center\">\n        <h1>Player: {playerScore}</h1>\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { playerChoice } from './reducers/card';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootReducer = combineReducers({ playerChoice });\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}